{
  "openapi": "3.1.1",
  "info": {
    "title": "CarConfigurator API",
    "version": "1.0.0",
    "description": "Comprehensive car configuration API with internationalization, user management, and admin features. Fully compliant with OpenAPI 3.1.1 specification for Robot Framework training and automation testing.",
    "contact": {
      "name": "CarConfigurator Team",
      "email": "support@carconfigurator.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "components": {
    "schemas": {
      "Car": {
        "type": "object",
        "required": [
          "id",
          "name",
          "category",
          "basePrice",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique car identifier"
          },
          "name": {
            "type": "string",
            "description": "Car model name",
            "examples": [
              "BMW X5",
              "Audi Q7",
              "Mercedes GLE"
            ]
          },
          "category": {
            "type": "string",
            "description": "Car category",
            "examples": [
              "SUV",
              "Sedan",
              "Coupe"
            ]
          },
          "basePrice": {
            "type": "number",
            "format": "float",
            "description": "Base price in Euro",
            "examples": [
              45000,
              52000,
              68000
            ]
          },
          "description": {
            "type": "string",
            "description": "Car description",
            "examples": [
              "Luxury SUV with latest technology",
              "Premium sedan with hybrid drive"
            ]
          },
          "imageUrl": {
            "type": [
              "string",
              "null"
            ],
            "description": "Car image URL (can be relative or absolute)",
            "examples": [
              "/images/cars/elegance-sedan.jpg",
              "https://example.com/car.jpg"
            ]
          },
          "imageData": {
            "type": [
              "string",
              "null"
            ],
            "description": "Base64 encoded image data"
          },
          "imageMimeType": {
            "type": [
              "string",
              "null"
            ],
            "description": "Image MIME type",
            "examples": [
              "image/jpeg",
              "image/png",
              "image/webp"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "Option": {
        "type": "object",
        "required": [
          "id",
          "name",
          "category",
          "price"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique option identifier"
          },
          "name": {
            "type": "string",
            "description": "Option name",
            "examples": [
              "Lederausstattung",
              "Sportmotor",
              "Panorama-Schiebedach"
            ]
          },
          "category": {
            "type": "string",
            "description": "Option category",
            "examples": [
              "Innenausstattung",
              "Motor",
              "Lackierung",
              "Felgen"
            ]
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "Option price in Euro",
            "examples": [
              2500,
              5000,
              1200
            ]
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Short option description"
          },
          "detailedDescription": {
            "type": [
              "string",
              "null"
            ],
            "description": "Detailed option description"
          },
          "imageUrl": {
            "type": [
              "string",
              "null"
            ],
            "description": "Option image URL (can be relative or absolute)",
            "examples": [
              "/images/options/sport-package.jpg",
              "https://example.com/option.jpg"
            ]
          },
          "imageData": {
            "type": [
              "string",
              "null"
            ],
            "description": "Base64 encoded image data"
          },
          "imageMimeType": {
            "type": [
              "string",
              "null"
            ],
            "description": "Image MIME type"
          },
          "exclusiveGroup": {
            "type": [
              "string",
              "null"
            ],
            "description": "Exclusive group - options in the same group are mutually exclusive"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates whether the option is required",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "email",
          "name",
          "role"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 5,
            "description": "User email address"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "User name"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin"
            ],
            "description": "User role"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "Configuration": {
        "type": "object",
        "required": [
          "id",
          "name",
          "totalPrice",
          "userId",
          "carId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique configuration identifier"
          },
          "name": {
            "type": "string",
            "description": "Configuration name",
            "examples": [
              "Meine Traumkonfiguration",
              "Sport-Edition",
              "Comfort-Paket"
            ]
          },
          "totalPrice": {
            "type": "number",
            "format": "float",
            "description": "Total configuration price in Euro"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user who created the configuration"
          },
          "carId": {
            "type": "string",
            "description": "ID of the configured car"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "car": {
            "$ref": "#/components/schemas/Car"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationOption"
            }
          }
        }
      },
      "ConfigurationOption": {
        "type": "object",
        "required": [
          "configurationId",
          "optionId",
          "option"
        ],
        "properties": {
          "configurationId": {
            "type": "string",
            "description": "ID of the configuration"
          },
          "optionId": {
            "type": "string",
            "description": "ID of the option"
          },
          "option": {
            "$ref": "#/components/schemas/Option"
          }
        }
      },
      "CreateCarRequest": {
        "type": "object",
        "required": [
          "name",
          "category",
          "basePrice",
          "description"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Car model name"
          },
          "category": {
            "type": "string",
            "minLength": 1,
            "description": "Kategorie des Autos"
          },
          "basePrice": {
            "type": "number",
            "format": "float",
            "minimum": 0.01,
            "description": "Base price in Euro"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "description": "Car description"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "description": "Car image URL"
          },
          "imageData": {
            "type": "string",
            "description": "Base64-kodierte Bilddaten"
          },
          "imageMimeType": {
            "type": "string",
            "description": "Image MIME type"
          },
          "translations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "locale": {
                  "type": "string",
                  "minLength": 2,
                  "examples": [
                    "de",
                    "en"
                  ]
                },
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "category": {
                  "type": "string",
                  "minLength": 1
                },
                "description": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        }
      },
      "UpdateCarRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Car model name"
          },
          "category": {
            "type": "string",
            "minLength": 1,
            "description": "Car category"
          },
          "basePrice": {
            "type": "number",
            "format": "float",
            "minimum": 0.01,
            "description": "Base price in Euro"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "description": "Car description"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "description": "Car image URL"
          },
          "imageData": {
            "type": "string",
            "description": "Base64 encoded image data"
          },
          "imageMimeType": {
            "type": "string",
            "description": "Image MIME type"
          },
          "translations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "locale": {
                  "type": "string",
                  "minLength": 2,
                  "examples": [
                    "de",
                    "en"
                  ]
                },
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "category": {
                  "type": "string",
                  "minLength": 1
                },
                "description": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        }
      },
      "CreateOptionRequest": {
        "type": "object",
        "required": [
          "name",
          "category",
          "price"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Option name"
          },
          "category": {
            "type": "string",
            "minLength": 1,
            "description": "Option category"
          },
          "price": {
            "type": "number",
            "format": "float",
            "minimum": 0.01,
            "description": "Option price in Euro"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "description": "Short option description"
          },
          "detailedDescription": {
            "type": "string",
            "minLength": 1,
            "description": "Detailed option description"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "description": "Option image URL"
          },
          "imageData": {
            "type": "string",
            "description": "Base64-kodierte Bilddaten"
          },
          "imageMimeType": {
            "type": "string",
            "description": "Image MIME type"
          },
          "exclusiveGroup": {
            "type": "string",
            "description": "Exklusivgruppe"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates whether the option is required"
          },
          "translations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "locale": {
                  "type": "string",
                  "minLength": 2,
                  "examples": [
                    "de",
                    "en"
                  ]
                },
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "category": {
                  "type": "string",
                  "minLength": 1
                },
                "description": {
                  "type": "string",
                  "minLength": 1
                },
                "detailedDescription": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        }
      },
      "CreateConfigurationRequest": {
        "type": "object",
        "required": [
          "name",
          "carId",
          "userId",
          "selectedOptions"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Configuration name"
          },
          "carId": {
            "type": "string",
            "description": "ID of the configured car"
          },
          "userId": {
            "type": "string",
            "description": "ID des Benutzers"
          },
          "selectedOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array der ausgewählten Options-IDs"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for admin login",
            "minLength": 5
          },
          "password": {
            "type": "string",
            "description": "Password for admin login",
            "minLength": 1
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": [
          "email",
          "name",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for registration",
            "minLength": 5
          },
          "name": {
            "type": "string",
            "description": "Name of the new user",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Password (minimum 6 characters)"
          }
        }
      },
      "ValidateOptionsRequest": {
        "type": "object",
        "required": [
          "optionIds"
        ],
        "properties": {
          "optionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of option IDs to validate"
          },
          "carId": {
            "type": "string",
            "description": "Optional: Car ID for context-specific validation"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "data": {
            "description": "Response data (only when success: true)"
          },
          "error": {
            "type": "string",
            "description": "Error message (only when success: false)"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "success",
          "error"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Always false for errors"
          },
          "error": {
            "type": "string",
            "description": "Fehlermeldung"
          },
          "details": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional error details"
          }
        }
      },
      "LocaleUpdate": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "type": "string",
            "enum": [
              "de",
              "en"
            ],
            "description": "Language locale code"
          }
        }
      },
      "RequiredGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the required group"
          },
          "exclusiveGroup": {
            "type": "string",
            "description": "Name of the exclusive group"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether this group is required for configurations"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "RequiredGroupUpdate": {
        "type": "object",
        "required": [
          "exclusiveGroup",
          "isRequired"
        ],
        "properties": {
          "exclusiveGroup": {
            "type": "string",
            "description": "Name of the exclusive group",
            "minLength": 1
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether this group should be required"
          }
        }
      },
      "AdminUserDelete": {
        "type": "object",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "ID of the user to delete",
            "minLength": 1
          }
        }
      },
      "UserSession": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Optional session identifier"
          },
          "userId": {
            "type": "string",
            "description": "Optional user identifier"
          }
        }
      },
      "option": {
        "type": "object",
        "required": [
          "id",
          "name",
          "category",
          "price"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique option identifier"
          },
          "name": {
            "type": "string",
            "description": "Option name",
            "examples": [
              "Sport Package",
              "Premium Sound",
              "Navigation"
            ]
          },
          "category": {
            "type": "string",
            "description": "Option category",
            "examples": [
              "engine",
              "interior",
              "exterior",
              "technology"
            ]
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "Option price in Euro",
            "minimum": 0
          },
          "description": {
            "type": "string",
            "description": "Detailed option description"
          },
          "imageUrl": {
            "type": [
              "string",
              "null"
            ],
            "description": "Option image URL (can be relative or absolute)",
            "examples": [
              "/images/options/sport-package.jpg",
              "https://example.com/image.jpg"
            ]
          },
          "isExclusive": {
            "type": "boolean",
            "description": "Whether this option is exclusive to one selection"
          },
          "exclusiveGroup": {
            "type": [
              "string",
              "null"
            ],
            "description": "Exclusive group identifier"
          },
          "requiredOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of required option IDs"
          },
          "conflictingOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of conflicting option IDs"
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation error response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "field": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized access response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized access"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "AdminAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "admin-session",
        "description": "Admin-Session-Cookie für authentifizierte Anfragen"
      },
      "UserAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT-Token für Benutzerauthentifizierung"
      }
    }
  },
  "paths": {
    "/api/admin/cars": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get all cars with all translations (admin only)",
        "description": "Retrieves all cars with all translations for admin management",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cars retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Car"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/admin/cleanup": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete all demo users and their configurations",
        "description": "Deletes demo users (identified by isRegistered = false) and their associated configurations (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Demo users and configurations deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "deletedUsers": {
                              "type": "number"
                            },
                            "deletedConfigurations": {
                              "type": "number"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/admin/options": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get all options with all translations (admin only)",
        "description": "Retrieves all options with all translations for admin management",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Option"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/admin/users": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get all users",
        "description": "Retrieves all users with optional statistics (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "parameters": [
          {
            "name": "includeStats",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include configuration statistics for each user"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete user",
        "description": "Deletes a user and all associated configurations (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUserDelete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "403": {
            "description": "Cannot delete admin users"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/auth/check": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Check authentication status",
        "description": "Verifies if the current user session is authenticated",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "isAuthenticated": {
                              "type": "boolean",
                              "description": "Whether the user is authenticated"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Admin login",
        "description": "Authenticates an administrator and creates a session",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string",
                              "example": "Successfully logged in"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid login credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Admin logout",
        "description": "Logs out the current admin session and clears the session cookie",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string",
                              "example": "Successfully logged out"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "summary": "Get current authenticated user",
        "description": "Returns the current user's data if the provided token is valid",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "user_123"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "role": {
                          "type": "string",
                          "example": "user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Token ungültig"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Server-Fehler"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register user",
        "description": "Creates a new user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "token": {
                              "type": "string",
                              "description": "JWT authentication token"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/user-login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "Authenticates a user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email address",
                    "minLength": 1
                  },
                  "password": {
                    "type": "string",
                    "description": "User password",
                    "minLength": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid login credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/cars/{id}": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Get car by ID",
        "description": "Retrieves a specific car by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Car ID"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "de",
                "en"
              ],
              "default": "de"
            },
            "description": "Language for localized content"
          }
        ],
        "responses": {
          "200": {
            "description": "Car successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Car"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Car not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Cars"
        ],
        "summary": "Update car",
        "description": "Updates an existing car (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Car ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Car model name"
                  },
                  "category": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Car category"
                  },
                  "basePrice": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0.01,
                    "description": "Base price in Euro"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Car description"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "Car image URL"
                  },
                  "imageData": {
                    "type": "string",
                    "description": "Base64 encoded image data"
                  },
                  "imageMimeType": {
                    "type": "string",
                    "description": "Image MIME type"
                  },
                  "translations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "locale": {
                          "type": "string",
                          "minLength": 2,
                          "examples": [
                            "de",
                            "en"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "minLength": 1
                        },
                        "category": {
                          "type": "string",
                          "minLength": 1
                        },
                        "description": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Car successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Car"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Car not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Cars"
        ],
        "summary": "Delete car",
        "description": "Deletes a car (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Car ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Car successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Car not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/cars": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Get all cars",
        "description": "Retrieves a list of all available cars with optional localization",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "de",
                "en"
              ],
              "default": "de"
            },
            "description": "Language for localized content"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Car"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Create new car",
        "description": "Creates a new car (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Car successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Car"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/configurations/{id}": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Get configuration by ID",
        "description": "Retrieves a specific configuration with car and options",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Configuration ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Configuration"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Configuration not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Configurations"
        ],
        "summary": "Delete configuration",
        "description": "Deletes a configuration and all associated options",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Configuration ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Configuration not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/configurations": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Get user configurations",
        "description": "Retrieve all configurations for a specific user",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User ID to filter configurations"
          }
        ],
        "responses": {
          "200": {
            "description": "Configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "examples": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Create a new configuration",
        "description": "Create a new car configuration with selected options",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "carId",
                  "totalPrice"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "My Dream Car",
                      "Sport Edition"
                    ]
                  },
                  "carId": {
                    "type": "string",
                    "examples": [
                      "car-1",
                      "car-2"
                    ]
                  },
                  "totalPrice": {
                    "type": "number",
                    "examples": [
                      45000,
                      67500
                    ]
                  },
                  "userId": {
                    "type": "string",
                    "examples": [
                      "user-123"
                    ]
                  },
                  "selectedOptions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "examples": [
                      [
                        "option-1",
                        "option-2"
                      ]
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "examples": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Configuration"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/locale": {
      "post": {
        "tags": [
          "Locale"
        ],
        "summary": "Update user locale",
        "description": "Updates the user's preferred language locale (de or en)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocaleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Locale updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/options/{id}/conflicts": {
      "get": {
        "tags": [
          "options"
        ],
        "summary": "Get conflicting options",
        "description": "Retrieves all options that conflict with the specified option",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "option ID to check conflicts for"
          }
        ],
        "responses": {
          "200": {
            "description": "Conflicting options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "conflictingoptionIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Array of conflicting option IDs"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/options/{id}": {
      "get": {
        "tags": [
          "options"
        ],
        "summary": "Get option by ID",
        "description": "Retrieves a specific option with translations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "option ID"
          }
        ],
        "responses": {
          "200": {
            "description": "option retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/option"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "option not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "options"
        ],
        "summary": "Update option",
        "description": "Updates an existing option (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "option ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "option updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/option"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "option not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "options"
        ],
        "summary": "Delete option",
        "description": "Deletes an option (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "option ID"
          }
        ],
        "responses": {
          "200": {
            "description": "option deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "option not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/options": {
      "get": {
        "tags": [
          "options"
        ],
        "summary": "Get all options",
        "description": "Retrieves all options with translations grouped by category",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "de",
                "en"
              ]
            },
            "description": "Language locale for translations"
          }
        ],
        "responses": {
          "200": {
            "description": "Options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/option"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "options"
        ],
        "summary": "Create new option",
        "description": "Creates a new option with translations (admin only)",
        "security": [
          {
            "AdminAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOptionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Option created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/option"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/options/validate-required": {
      "post": {
        "tags": [
          "Options"
        ],
        "summary": "Validate required options",
        "description": "Checks if all required options are selected for a given car configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "selectedOptionIds",
                  "carId"
                ],
                "properties": {
                  "selectedOptionIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of selected option IDs"
                  },
                  "carId": {
                    "type": "string",
                    "description": "Car ID to validate against"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "isValid": {
                          "type": "boolean"
                        },
                        "missingRequired": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Option"
                          }
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/options/validate": {
      "post": {
        "tags": [
          "options"
        ],
        "summary": "Validate option configuration",
        "description": "Checks if the selected options are compatible with each other",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateOptionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Validation result",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "isValid": {
                              "type": "boolean"
                            },
                            "conflicts": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/required-groups": {
      "get": {
        "tags": [
          "required groups"
        ],
        "summary": "Get all required groups",
        "description": "Retrieves all exclusive groups and their required status",
        "responses": {
          "200": {
            "description": "Required groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RequiredGroup"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "required groups"
        ],
        "summary": "Update required group status",
        "description": "Updates whether an exclusive group is required for configurations",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequiredGroupUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Required group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/RequiredGroup"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/user/demo": {
      "get": {
        "tags": [
          "User Demo"
        ],
        "summary": "Create demo user",
        "description": "Creates a unique demo user for testing purposes",
        "responses": {
          "200": {
            "description": "Demo user created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "User ID"
                            },
                            "name": {
                              "type": "string",
                              "description": "Demo user name"
                            },
                            "email": {
                              "type": "string",
                              "description": "Demo user email"
                            },
                            "sessionId": {
                              "type": "string",
                              "description": "Unique session identifier"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/user/session": {
      "post": {
        "tags": [
          "User Session"
        ],
        "summary": "Manage user session",
        "description": "Creates or retrieves a user session for demo purposes",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSession"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User session managed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "sessionId": {
                              "type": "string",
                              "description": "Only present for new sessions"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "tags": []
}